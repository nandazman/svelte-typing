{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Action.svelte",
    "DisplayWords.svelte",
    "Result.svelte"
  ],
  "sourcesContent": [
    "<svelte:head>\r\n\t<link href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500&display=swap\" rel=\"stylesheet\">\r\n</svelte:head>\r\n\r\n<script type=\"module\" lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport DisplayWords from \"./component/DisplayWords.svelte\";\r\nimport Action from \"./component/Action.svelte\";\r\nimport Result from \"./component/Result.svelte\";\r\nimport API from \"../services/api\";\r\nimport { onMount } from 'svelte';\r\nlet wordLists = [];\r\nlet containerPosition = {\r\n    offsetTop: 0,\r\n    currentPositionTop: 0\r\n};\r\nlet currentWord = {\r\n    index: 0,\r\n    offsetTop: 0\r\n};\r\nlet keystrokes = {\r\n    total: 0,\r\n    incorrect: 0\r\n};\r\nlet result = false;\r\nonMount(() => __awaiter(void 0, void 0, void 0, function* () {\r\n    yield getWordLists();\r\n}));\r\nconst getWordLists = () => __awaiter(void 0, void 0, void 0, function* () {\r\n    wordLists = [];\r\n    const response = yield API.get();\r\n    const getSartingPoint = Math.floor(Math.random() * 1592);\r\n    const sentences = response.data.slice(getSartingPoint, getSartingPoint + 50);\r\n    wordLists = adjustArrayText(sentences);\r\n});\r\nconst adjustArrayText = (sentences) => {\r\n    const displayWords = [];\r\n    for (let i = 0; i < sentences.length; i++) {\r\n        const words = sentences[i].text.split(' ');\r\n        for (let j = 0; j < words.length; j++) {\r\n            if (displayWords.length === 250) {\r\n                return displayWords;\r\n            }\r\n            ;\r\n            displayWords.push({\r\n                text: words[j]\r\n            });\r\n        }\r\n    }\r\n};\r\n</script>\r\n\r\n<main>\r\n\t{#if !result}\r\n\t\t<DisplayWords bind:currentWord={currentWord} bind:wordLists={wordLists} bind:containerPosition={containerPosition} />\r\n\t{/if}\r\n\t<Action \r\n\t\ton:showResult={(value) => {\r\n\t\t\tresult = value.detail;\r\n\t\t}} \r\n\t\tbind:currentWord={currentWord} \r\n\t\tbind:wordLists={wordLists} \r\n\t\tbind:keystrokes={keystrokes}\r\n\t\ton:getWordLists={getWordLists} \r\n\t\tbind:containerPosition={containerPosition}/>\r\n\t{#if result}\r\n\t\t<Result \r\n\t\t\tbind:currentWord={currentWord}\r\n\t\t\tbind:keystrokes={keystrokes} \r\n\t\t\tbind:wordLists={wordLists}\r\n\t\t/>\r\n\t{/if}\r\n</main>\r\n\r\n<style lang=\"scss\">main {\n  text-align: center;\n  padding: 1em;\n  margin: 0 auto;\n  font-family: \"Montserrat\", sans-serif;\n}\n@media (min-width: 640px) {\n  main {\n    max-width: none;\n  }\n}</style>",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n;\r\nimport { createEventDispatcher } from 'svelte';\r\nconst dispatch = createEventDispatcher();\r\nexport let currentWord;\r\nexport let wordLists;\r\nexport let containerPosition;\r\nexport let keystrokes;\r\nlet inputUser;\r\nlet game = {\r\n    start: false,\r\n    init: true,\r\n    finish: false\r\n};\r\nlet timer = {\r\n    interval: null,\r\n    minutes: 1,\r\n    seconds: 0\r\n};\r\nconst adjustDispayNumber = (number) => {\r\n    return number.toString().length === 1 ? '0' + number : number;\r\n};\r\nconst checkCurrentActiveWord = (typedWord, word) => {\r\n    for (let i = 0; i < typedWord.trim().length; i++) {\r\n        if (word[i] !== typedWord[i]) {\r\n            keystrokes.incorrect++;\r\n            wordLists[currentWord.index].incorrect = true;\r\n            break;\r\n        }\r\n    }\r\n};\r\nconst startTimer = () => {\r\n    timer.interval = setInterval(() => {\r\n        if (timer.seconds !== 0) {\r\n            timer.seconds--;\r\n        }\r\n        else if (timer.minutes !== 0) {\r\n            timer.minutes--;\r\n            if (timer.minutes === 0) {\r\n                timer.seconds = 59;\r\n            }\r\n        }\r\n        else {\r\n            finishGame();\r\n        }\r\n    }, 1000);\r\n};\r\nconst finishGame = () => {\r\n    clearInterval(timer.interval);\r\n    dispatch('showResult', true);\r\n    game.start = false;\r\n    game.finish = true;\r\n    inputUser = '';\r\n};\r\nconst startGame = () => {\r\n    if (!game.start) {\r\n        game.start = true;\r\n        game.init = false;\r\n        startTimer();\r\n    }\r\n    ;\r\n};\r\nconst checkGameProgress = () => {\r\n    return game.start;\r\n};\r\nconst userPressKey = ({ keyCode }) => {\r\n    const inGame = checkGameProgress();\r\n    if (!inGame) {\r\n        startGame();\r\n    }\r\n    const typedWord = inputUser || '';\r\n    const word = wordLists[currentWord.index].text;\r\n    wordLists[currentWord.index].incorrect = false;\r\n    if (keyCode === 32) {\r\n        procedNextWord(typedWord, word);\r\n    }\r\n    else {\r\n        keystrokes.total++;\r\n        checkCurrentActiveWord(typedWord, word);\r\n    }\r\n};\r\nconst procedNextWord = (typedWord, word) => {\r\n    const splittedInput = typedWord.split(' ');\r\n    updateLatestWordStatus(word, splittedInput[0]);\r\n    initFirstWord(splittedInput[1]);\r\n    moveDisplayWordPosition();\r\n};\r\nconst initFirstWord = (initWord) => {\r\n    inputUser = initWord || '';\r\n};\r\nconst moveDisplayWordPosition = () => {\r\n    currentWord.index++;\r\n    // inside HTMLElementTagNameMap interface there is HTMLSpanElement\r\n    // then we can use offsetTop property\r\n    const activeElement = document.querySelectorAll('.word')[currentWord.index];\r\n    if (activeElement && activeElement.offsetTop > currentWord.offsetTop) {\r\n        containerPosition.offsetTop += 52;\r\n        currentWord.offsetTop = activeElement.offsetTop;\r\n    }\r\n};\r\nconst updateLatestWordStatus = (activeWord, lastWord) => {\r\n    if (activeWord.trim() !== lastWord.trim()) {\r\n        wordLists[currentWord.index].incorrect = true;\r\n    }\r\n};\r\nconst restart = () => __awaiter(void 0, void 0, void 0, function* () {\r\n    clearInterval(timer.interval);\r\n    dispatch('showResult', false);\r\n    dispatch('getWordLists');\r\n    initFirstWord();\r\n    currentWord.index = 0;\r\n    containerPosition.offsetTop = 0;\r\n    currentWord.offsetTop = 0;\r\n    timer = {\r\n        minutes: 1,\r\n        interval: null,\r\n        seconds: 0\r\n    };\r\n    game = {\r\n        start: false,\r\n        init: true,\r\n        finish: false\r\n    };\r\n});\r\n</script>\r\n\r\n<div class=\"flex\">\r\n  <input type='text' bind:value=\"{inputUser}\" on:keyup={userPressKey} disabled={!game.init && !game.start}>\r\n  <div class=\"timer\">\r\n    <span class=\"{game.start ? 'timer-animation' : ''}\">\r\n      {adjustDispayNumber(timer.minutes)}:{adjustDispayNumber(timer.seconds)}\r\n    </span>\r\n  </div>\r\n  <button class=\"restart\" on:click={restart}>Restart</button>\r\n</div>\r\n\r\n<style lang=\"scss\">.flex {\n  display: flex;\n  justify-content: center;\n}\n\n.timer {\n  border: 1px solid #079e73;\n  margin: 0 0.5rem;\n  height: 35px;\n  line-height: 30px;\n  padding: 0 1rem;\n  font-weight: bold;\n}\n.timer .timer-animation {\n  animation: blinking 2s infinite;\n}\n@keyframes blinking {\n  0% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\nbutton.restart {\n  background-color: #079e73;\n  border: 1px solid #18765b;\n  cursor: pointer;\n  color: white;\n  transition: background-color 250ms;\n}\nbutton.restart:hover {\n  background-color: #1ea780;\n}</style>",
    "<script lang=\"ts\">;\r\nexport let currentWord;\r\nexport let wordLists;\r\nexport let containerPosition;\r\nconst getClassWordBasedOnInput = (i, word) => {\r\n    if (currentWord.index === i) {\r\n        if (word.incorrect)\r\n            return 'active incorrect';\r\n        return 'active';\r\n    }\r\n    if (i < currentWord.index) {\r\n        if (word.incorrect)\r\n            return 'incorrect';\r\n        return 'correct';\r\n    }\r\n    return '';\r\n};\r\n</script>\r\n<div class=\"container\">\r\n  <div class=\"word-container\" style=\"bottom:{containerPosition.offsetTop}px\">\r\n    {#each wordLists as word, i}\r\n      <span class=\"word {getClassWordBasedOnInput(i, word)}\">{word.text}</span>\r\n    {/each}\r\n  </div>\r\n</div>\r\n\r\n<style lang=\"scss\">.container {\n  height: 110px;\n  overflow: hidden;\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n  max-width: 815px;\n  margin: auto;\n  background: #fff;\n  padding: 0.5rem 1rem;\n  margin-bottom: 1rem;\n}\n.container .word-container {\n  position: relative;\n  display: flex;\n  flex-wrap: wrap;\n}\n.container .word-container .word {\n  line-height: 1.5em;\n  font-size: 1.75em;\n  border-radius: 5px;\n  margin-bottom: 10px;\n  padding: 0 5px;\n  user-select: none;\n}\n.container .word-container .word.incorrect {\n  color: red;\n}\n.container .word-container .word.correct {\n  color: green;\n}\n.container .word-container .word.active {\n  background-color: #d4d3d3;\n}</style>",
    "<script lang=\"ts\">;\r\nexport let currentWord;\r\nexport let keystrokes;\r\nexport let wordLists;\r\nlet wpm;\r\nlet correctWords;\r\nlet incorrectWords;\r\nlet accuracy;\r\nconst calculateSummary = () => {\r\n    // since only one minute, all typed word until game finish is a wpm as well\r\n    wpm = calculateWPM();\r\n    correctWords = countCorrectWord();\r\n    incorrectWords = countIncorrectWord(wpm, correctWords);\r\n    accuracy = calculateAccuracy(keystrokes.total, keystrokes.incorrect);\r\n};\r\nconst calculateWPM = () => {\r\n    const typedWords = getTypedWord();\r\n    const totalWords = typedWords.length;\r\n    return totalWords;\r\n};\r\nconst countCorrectWord = () => {\r\n    const typedWords = getTypedWord();\r\n    let total = 0;\r\n    typedWords.forEach((item) => {\r\n        if (!item.incorrect) {\r\n            total++;\r\n        }\r\n    });\r\n    return total;\r\n};\r\nconst countIncorrectWord = (totalWords, correctWords) => {\r\n    return wpm - correctWords;\r\n};\r\nconst calculateAccuracy = (totalKeystroke, incorrectKey) => {\r\n    return Math.floor((totalKeystroke - incorrectKey) / totalKeystroke * 100);\r\n};\r\nconst getTypedWord = () => {\r\n    return wordLists.slice(0, currentWord.index);\r\n};\r\ncalculateSummary();\r\n</script>\r\n<div class=\"result\">\r\n  <div class=\"result__summary\">\r\n    {wpm} WPM\r\n  </div>\r\n  <table class=\"result__detail\">\r\n    <tr class=\"detail__text\">\r\n      <td>Keystrokes</td>\r\n      <td>:</td>\r\n      <td><span class=\"correct\">{keystrokes.total - keystrokes.incorrect}</span> | <span class=\"incorrect\">{keystrokes.incorrect}</span></td>\r\n    </tr>\r\n    <tr class=\"detail__text\">\r\n      <td>Accuracy</td>\r\n      <td>:</td>\r\n      <td>{accuracy}%</td>\r\n    </tr>\r\n    <tr class=\"detail__text\">\r\n      <td>Correct word(s)</td>\r\n      <td>:</td>\r\n      <td><span class=\"correct\">{correctWords}</span></td>\r\n    </tr>\r\n    <tr class=\"detail__text\">\r\n      <td>Wrong word(s)</td>\r\n      <td>:</td>\r\n      <td><span class=\"incorrect\">{incorrectWords}</span></td>\r\n    </tr>\r\n  </table>\r\n</div>\r\n\r\n<style lang=\"scss\">.result {\n  display: flex;\n  justify-content: center;\n}\n.result .result__summary {\n  font-weight: bold;\n  font-size: 3rem;\n  color: #079e73;\n  padding: 1rem;\n}\n.result .result__detail {\n  display: flex;\n  flex-direction: column;\n}\n.result .result__detail .detail__text {\n  margin-top: 0;\n  margin-bottom: 0.5rem;\n  text-align: left;\n}\n.result .result__detail .detail__text td:first-child {\n  width: 130px;\n}\n.result .result__detail .detail__text .correct {\n  color: #079e73;\n}\n.result .result__detail .detail__text .incorrect {\n  color: #d20f0f;\n}</style>"
  ],
  "names": [],
  "mappings": "AAiFmB,IAAI,cAAC,CAAC,AACvB,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,WAAW,CAAE,YAAY,CAAC,CAAC,UAAU,AACvC,CAAC,AACD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,IAAI,cAAC,CAAC,AACJ,SAAS,CAAE,IAAI,AACjB,CAAC,AACH,CAAC;ACqDkB,KAAK,4BAAC,CAAC,AACxB,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,AACzB,CAAC,AAED,MAAM,4BAAC,CAAC,AACN,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,MAAM,CAAE,CAAC,CAAC,MAAM,CAChB,MAAM,CAAE,IAAI,CACZ,WAAW,CAAE,IAAI,CACjB,OAAO,CAAE,CAAC,CAAC,IAAI,CACf,WAAW,CAAE,IAAI,AACnB,CAAC,AACD,oBAAM,CAAC,gBAAgB,cAAC,CAAC,AACvB,SAAS,CAAE,sBAAQ,CAAC,EAAE,CAAC,QAAQ,AACjC,CAAC,AACD,WAAW,sBAAS,CAAC,AACnB,EAAE,AAAC,CAAC,AACF,OAAO,CAAE,CAAC,AACZ,CAAC,AACD,GAAG,AAAC,CAAC,AACH,OAAO,CAAE,CAAC,AACZ,CAAC,AACD,IAAI,AAAC,CAAC,AACJ,OAAO,CAAE,CAAC,AACZ,CAAC,AACH,CAAC,AAED,MAAM,QAAQ,4BAAC,CAAC,AACd,gBAAgB,CAAE,OAAO,CACzB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,MAAM,CAAE,OAAO,CACf,KAAK,CAAE,KAAK,CACZ,UAAU,CAAE,gBAAgB,CAAC,KAAK,AACpC,CAAC,AACD,MAAM,oCAAQ,MAAM,AAAC,CAAC,AACpB,gBAAgB,CAAE,OAAO,AAC3B,CAAC;AC3JkB,UAAU,4BAAC,CAAC,AAC7B,MAAM,CAAE,KAAK,CACb,QAAQ,CAAE,MAAM,CAChB,UAAU,CAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAC1C,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,IAAI,CAChB,OAAO,CAAE,MAAM,CAAC,IAAI,CACpB,aAAa,CAAE,IAAI,AACrB,CAAC,AACD,wBAAU,CAAC,eAAe,cAAC,CAAC,AAC1B,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,AACjB,CAAC,AACD,wBAAU,CAAC,eAAe,CAAC,KAAK,cAAC,CAAC,AAChC,WAAW,CAAE,KAAK,CAClB,SAAS,CAAE,MAAM,CACjB,aAAa,CAAE,GAAG,CAClB,aAAa,CAAE,IAAI,CACnB,OAAO,CAAE,CAAC,CAAC,GAAG,CACd,WAAW,CAAE,IAAI,AACnB,CAAC,AACD,wBAAU,CAAC,eAAe,CAAC,KAAK,UAAU,cAAC,CAAC,AAC1C,KAAK,CAAE,GAAG,AACZ,CAAC,AACD,wBAAU,CAAC,eAAe,CAAC,KAAK,QAAQ,cAAC,CAAC,AACxC,KAAK,CAAE,KAAK,AACd,CAAC,AACD,wBAAU,CAAC,eAAe,CAAC,KAAK,OAAO,cAAC,CAAC,AACvC,gBAAgB,CAAE,OAAO,AAC3B,CAAC;ACYkB,OAAO,4BAAC,CAAC,AAC1B,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,AACzB,CAAC,AACD,qBAAO,CAAC,gBAAgB,cAAC,CAAC,AACxB,WAAW,CAAE,IAAI,CACjB,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,OAAO,CACd,OAAO,CAAE,IAAI,AACf,CAAC,AACD,qBAAO,CAAC,eAAe,cAAC,CAAC,AACvB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,AACxB,CAAC,AACD,qBAAO,CAAC,eAAe,CAAC,aAAa,cAAC,CAAC,AACrC,UAAU,CAAE,CAAC,CACb,aAAa,CAAE,MAAM,CACrB,UAAU,CAAE,IAAI,AAClB,CAAC,AACD,qBAAO,CAAC,eAAe,CAAC,aAAa,CAAC,gBAAE,YAAY,AAAC,CAAC,AACpD,KAAK,CAAE,KAAK,AACd,CAAC,AACD,qBAAO,CAAC,eAAe,CAAC,aAAa,CAAC,QAAQ,cAAC,CAAC,AAC9C,KAAK,CAAE,OAAO,AAChB,CAAC,AACD,qBAAO,CAAC,eAAe,CAAC,aAAa,CAAC,UAAU,cAAC,CAAC,AAChD,KAAK,CAAE,OAAO,AAChB,CAAC"
}