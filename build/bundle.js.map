{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/component/DisplayWords.svelte","../../src/component/Action.svelte","../../src/component/Result.svelte","../../src/quotes.ts","../../src/App.svelte","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            const remove = [];\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j++];\n                if (!attributes[attribute.name]) {\n                    remove.push(attribute.name);\n                }\n            }\n            for (let k = 0; k < remove.length; k++) {\n                node.removeAttribute(remove[k]);\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    const z_index = (parseInt(computed_style.zIndex) || 0) - 1;\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', `display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ` +\n        `overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: ${z_index};`);\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = `data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>`;\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(anchor = null) {\n        this.a = anchor;\n        this.e = this.n = null;\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.h(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error(`Function called outside component initialization`);\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            info.blocks[i] = null;\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error(`Cannot have duplicate keys in a keyed each`);\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += \" \" + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += \" \" + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : ``;\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    // onMount happens before the initial afterUpdate\n    add_render_callback(() => {\n        const new_on_destroy = on_mount.map(run).filter(is_function);\n        if (on_destroy) {\n            on_destroy.push(...new_on_destroy);\n        }\n        else {\n            // Edge case - component was destroyed immediately,\n            // most likely as a result of a binding initialising\n            run_all(new_on_destroy);\n        }\n        component.$$.on_mount = [];\n    });\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const prop_values = options.props || {};\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, prop_values, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.29.0' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev(\"SvelteDOMRemove\", { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? [\"capture\"] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev(\"SvelteDOMAddEventListener\", { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev(\"SvelteDOMRemoveEventListener\", { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev(\"SvelteDOMRemoveAttribute\", { node, attribute });\n    else\n        dispatch_dev(\"SvelteDOMSetAttribute\", { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev(\"SvelteDOMSetProperty\", { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev(\"SvelteDOMSetDataset\", { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev(\"SvelteDOMSetData\", { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(`'target' is a required option`);\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn(`Component was already destroyed`); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error(`Infinite loop detected`);\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_keyed_each, update_slot, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","<script lang=\"ts\">\n  import type { CurrentWord, ContainerPosition } from '../model/index';\n\n  export let currentWord: CurrentWord;\n  export let wordLists: any[];\n  export let containerPosition: ContainerPosition;\n  \n  const getClassWordBasedOnInput = (i: number, word: any) => {\n\t\tif (currentWord.index === i) {\n\t\t\tif (word.incorrect) return 'active incorrect';\n\t\t\treturn 'active'\n\t\t}\n\t\tif (i < currentWord.index) {\n\t\t\tif (word.incorrect) return 'incorrect';\n\t\t\treturn 'correct';\n\t\t}\n\t\treturn ''\n\t}\n</script>\n<div class=\"container\">\n  <div class=\"word-container\" style=\"bottom:{containerPosition.offsetTop}px\">\n    {#each wordLists as word, i}\n      <span class=\"word {getClassWordBasedOnInput(i, word)}\">{word.text}</span>\n    {/each}\n  </div>\n</div>\n\n<style lang=\"scss\">\n  .container {\n    height: 110px;\n    overflow: hidden;\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\n    max-width: 815px;\n    margin: auto;\n    background: #fff;\n    padding: 0.5rem 1rem;\n    margin-bottom: 1rem;\n    .word-container {\n      position: relative;\n      display: flex;\n      flex-wrap: wrap;\n      .word {\n        line-height: 1.5em;\n        font-size: 1.75em;\n        border-radius: 5px;\n        margin-bottom: 10px;\n        padding: 0 5px;\n        user-select: none;\n        &.incorrect {\n          color: red;\n        }\n        &.correct {\n          color: green;\n        }\n        &.active {\n          background-color: #d4d3d3;\n        }\n      }\n    }\n\n  }\n</style>","<script lang=\"ts\">\n  import type { CurrentWord, ContainerPosition, KeyStroke } from '../model/index';\n  import { createEventDispatcher } from 'svelte';\n\n  const dispatch = createEventDispatcher();\n\n  export let currentWord: CurrentWord;\n  export let wordLists: any[];\n  export let containerPosition: ContainerPosition;\n\texport let keystrokes: KeyStroke;\n\n  let inputUser: string;\n  let game = {\n\t\tstart: false,\n\t\tinit: true,\n\t\tfinish: false\n\t}\n\tlet timer = {\n\t\tinterval: null,\n\t\tminutes: 1,\n\t\tseconds: 0\n\t}\n\n  const adjustDispayNumber = (number: number) => {\n\t\treturn number.toString().length === 1 ? '0' + number : number;\n  }\n\n  const checkCurrentActiveWord = (typedWord:string, word:string) => {\n\t\tfor (let i = 0; i < typedWord.trim().length; i++) {\n\t\t\tif(word[i] !== typedWord[i]) {\n\t\t\t\tkeystrokes.incorrect++;\n\t\t\t\twordLists[currentWord.index].incorrect = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n  const startTimer = () => {\n\t\ttimer.interval = setInterval(() => {\n\t\t\tif (timer.seconds !== 0) {\n\t\t\t\ttimer.seconds--;\n\t\t\t} else if (timer.minutes !== 0) {\n\t\t\t\ttimer.minutes--;\n\t\t\t\tif (timer.minutes === 0) {\n\t\t\t\t\ttimer.seconds = 59;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfinishGame();\n\t\t\t}\n\t\t}, 1000)\n\t}\n\n\tconst finishGame = () => {\n\t\tclearInterval(timer.interval);\n\t\tdispatch('showResult', true);\n\t\tgame.start = false;\n\t\tgame.finish = true;\n\t\tinputUser = '';\n\t}\n  const startGame = () => {\n\t\tif (!game.start){ \n\t\t\tgame.start = true;\n\t\t\tgame.init = false;\n\t\t\tstartTimer();\n\t\t};\n\t}\n\n  const checkGameProgress = () => {\n\t\treturn game.start;\n  }\n  \n  const userPressKey = ({ keyCode }) => {\n\t\tconst inGame = checkGameProgress();\n\t\tif (!inGame) {\n\t\t\tstartGame();\n\t\t}\n\t\tconst typedWord = inputUser || '';\n\t\tconst word = wordLists[currentWord.index].text;\n\t\twordLists[currentWord.index].incorrect = false;\n\n\t\tif (keyCode === 32) {\n      procedNextWord(typedWord, word)\n\t\t} else {\n\t\t\tkeystrokes.total++;\n\t\t\tcheckCurrentActiveWord(typedWord, word)\n\t\t}\n  }\n  \n  const procedNextWord = (typedWord:string, word:string) => {\n\t\tconst splittedInput = typedWord.split(' ');\n\t\tupdateLatestWordStatus(word, splittedInput[0]);\n\t\tinitFirstWord(splittedInput[1]);\n\t\tmoveDisplayWordPosition()\n  }\n  \n  const initFirstWord = (initWord?:string) => {\n\t\tinputUser = initWord || '';\n\t}\n\n\tconst moveDisplayWordPosition = () => {\n\t\tcurrentWord.index++;\n\t\t// inside HTMLElementTagNameMap interface there is HTMLSpanElement\n\t\t// then we can use offsetTop property\n\t\tconst activeElement = document.querySelectorAll<HTMLSpanElement>('.word')[currentWord.index];\n\t\tif (activeElement && activeElement.offsetTop > currentWord.offsetTop) {\n\t\t\tcontainerPosition.offsetTop += 52;\n\t\t\tcurrentWord.offsetTop = activeElement.offsetTop;\n\t\t}\n\t}\n\n\tconst updateLatestWordStatus = (activeWord: string, lastWord: string) => {\n\t\tif(activeWord.trim() !== lastWord.trim()) {\n\t\t\t\twordLists[currentWord.index].incorrect = true;\n\t\t\t}\n  }\n  \n  const restart = async () => {\n\t\tclearInterval(timer.interval);\n\t\tdispatch('showResult', false);\n\t\tdispatch('getWordLists');\n\t\tinitFirstWord()\n\t\tcurrentWord.index = 0;\n\t\tcontainerPosition.offsetTop = 0;\n\t\tcurrentWord.offsetTop = 0;\n\t\ttimer = {\n\t\t\tminutes: 1,\n\t\t\tinterval: null,\n\t\t\tseconds: 0\n\t\t}\n\t\tgame = {\n\t\t\tstart: false,\n\t\t\tinit: true,\n\t\t\tfinish: false\n\t\t}\n\t}\n</script>\n\n<div class=\"flex\">\n  <input type='text' bind:value=\"{inputUser}\" on:keyup={userPressKey} disabled={!game.init && !game.start}>\n  <div class=\"timer\">\n    <span class=\"{game.start ? 'timer-animation' : ''}\">\n      {adjustDispayNumber(timer.minutes)}:{adjustDispayNumber(timer.seconds)}\n    </span>\n  </div>\n  <button class=\"restart\" on:click={restart}>Restart</button>\n</div>\n\n<style lang=\"scss\">\n  .flex {\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t}\n\n\t.timer {\n\t\tborder: 1px solid #079e73;\n\t\tmargin: 0 .5rem;\n\t\theight: 35px;\n\t\tline-height: 30px;\n\t\tpadding: 0 1rem;\n\t\tfont-weight: bold;\n\t\t.timer-animation {\n\t\t\tanimation: blinking 2s infinite;\n\t\t\t@keyframes blinking {\n\t\t\t\t0% {opacity: 1;}\n\t\t\t\t50% {opacity: 0;}\n\t\t\t\t100% {opacity: 1;}\n\t\t\t}\n\t\t}\n\t}\n\tbutton {\n\t\t&.restart {\n\t\t\tbackground-color: #079e73;\n\t\t\tborder: 1px solid #18765b;\n\t\t\tcursor: pointer;\n\t\t\tcolor: white;\n\t\t\ttransition: background-color 250ms;\n\t\t\t&:hover {\n\t\t\t\tbackground-color: #1ea780;\n\t\t\t}\n\t\t}\n\t}\n</style>","<script lang=\"ts\">\n  import type { KeyStroke, CurrentWord } from '../model/index';\n  export let currentWord: CurrentWord;\n  export let keystrokes: KeyStroke;\n  export let wordLists: any[];\n\n  let wpm: number;\n  let correctWords: number;\n  let incorrectWords: number;\n  let accuracy: number;\n  const calculateSummary = () => {\n    // since only one minute, all typed word until game finish is a wpm as well\n    wpm = calculateWPM();\n    correctWords = countCorrectWord();\n    incorrectWords = countIncorrectWord(wpm, correctWords);\n    accuracy = calculateAccuracy(keystrokes.total, keystrokes.incorrect);\n  }\n\n  const calculateWPM = () => {\n    const typedWords = getTypedWord();\n    const totalWords = typedWords.length;\n    return totalWords;\n  }\n\n  const countCorrectWord = () => {\n    const typedWords = getTypedWord();\n    let total = 0;\n    typedWords.forEach((item) => {\n      if (!item.incorrect) {\n        total++;\n      }\n    })\n    return total;\n  }\n\n  const countIncorrectWord = (totalWords: number, correctWords: number) => {\n    return wpm - correctWords;\n  }\n\n  const calculateAccuracy = (totalKeystroke: number, incorrectKey: number) => {\n    return Math.floor((totalKeystroke - incorrectKey) / totalKeystroke * 100);\n  }\n\n  const getTypedWord = () => {\n    return wordLists.slice(0, currentWord.index);\n  }\n\n  calculateSummary();\n</script>\n<div class=\"result\">\n  <div class=\"result__summary\">\n    {wpm} WPM\n  </div>\n  <table class=\"result__detail\">\n    <tr class=\"detail__text\">\n      <td>Keystrokes</td>\n      <td>:</td>\n      <td><span class=\"correct\">{keystrokes.total - keystrokes.incorrect}</span> | <span class=\"incorrect\">{keystrokes.incorrect}</span></td>\n    </tr>\n    <tr class=\"detail__text\">\n      <td>Accuracy</td>\n      <td>:</td>\n      <td>{accuracy}%</td>\n    </tr>\n    <tr class=\"detail__text\">\n      <td>Correct word(s)</td>\n      <td>:</td>\n      <td><span class=\"correct\">{correctWords}</span></td>\n    </tr>\n    <tr class=\"detail__text\">\n      <td>Wrong word(s)</td>\n      <td>:</td>\n      <td><span class=\"incorrect\">{incorrectWords}</span></td>\n    </tr>\n  </table>\n</div>\n\n<style lang=\"scss\">\n  .result {\n    display: flex;\n    justify-content: center;\n    .result__summary {\n      font-weight: bold;\n      font-size: 3rem;\n      color: #079e73;\n      padding: 1rem;\n    }\n    .result__detail {\n      display: flex;\n      flex-direction: column;\n      .detail__text {\n        margin-top: 0;\n        margin-bottom: .5rem;\n        text-align: left;\n        td:first-child {\n          width: 130px;\n        }\n        .correct {\n          color: #079e73;\n        }\n        .incorrect {\n          color: #d20f0f;\n        }\n      }\n    }\n  }\n</style>","export const quotes = [\n    \"Imagination is more important than knowledge.\",\n    \"If I have seen further, it is by standing on the shoulders of giants.\",\n    \"Nothing in life is to be feared, it is only to be understood.\",\n    \"The present is theirs; the future, for which I really worked, is mine.\",\n    \"I have not failed. I've just found 10,000 ways that won't work.\",\n    \"Nature isn’t classical, dammit, and if you want to make a simulation of nature, you’d better make it quantum mechanical.\",\n    \"The cosmos is within us. We are made of star-stuff.\",\n    \"Remember to look up at the stars and not down at your feet.\",\n    \"To invent, you need a good imagination and a pile of junk.\",\n    \"The only way to do great work is to love what you do.\",\n    \"Genius is one percent inspiration and ninety-nine percent perspiration.\",\n    \"We can complain because rose bushes have thorns, or rejoice because thorns have roses.\",\n    \"The future depends on what we do in the present.\",\n    \"In science, there are no shortcuts to truth.\",\n    \"The greatest glory in living lies not in never falling, but in rising every time we fall.\",\n    \"Life is really simple, but we insist on making it complicated.\",\n    \"The way to get started is to quit talking and begin doing.\",\n    \"I would rather die of passion than of boredom.\",\n    \"Success is not final, failure is not fatal: It is the courage to continue that counts.\",\n    \"Your time is limited, don't waste it living someone else's life.\",\n    \"In the middle of difficulty lies opportunity.\",\n    \"The only limit to our realization of tomorrow will be our doubts of today.\",\n    \"The only thing necessary for the triumph of evil is for good men to do nothing.\",\n    \"A person who never made a mistake never tried anything new.\",\n    \"The measure of intelligence is the ability to change.\",\n    \"Life is like riding a bicycle. To keep your balance, you must keep moving.\",\n    \"If you want to find the secrets of the universe, think in terms of energy, frequency, and vibration.\",\n    \"The more I learn, the more I realize how much I don't know.\",\n    \"Science is the great antidote to the poison of enthusiasm and superstition.\",\n    \"The true sign of intelligence is not knowledge but imagination.\",\n    \"The best way to predict the future is to create it.\",\n    \"The only thing that interferes with my learning is my education.\",\n    \"Two things are infinite: the universe and human stupidity; and I'm not sure about the universe.\",\n    \"A person who never made a mistake never tried anything new.\",\n    \"We cannot solve our problems with the same thinking we used when we created them.\",\n    \"The greatest glory in living lies not in never falling, but in rising every time we fall.\",\n    \"We can complain because rose bushes have thorns, or rejoice because thorns have roses.\",\n    \"In the middle of difficulty lies opportunity.\",\n    \"Imagination is everything. It is the preview of life's coming attractions.\",\n    \"I have no special talent. I am only passionately curious.\",\n    \"The true sign of intelligence is not knowledge but imagination.\",\n    \"The more I learn, the more I realize how much I don't know.\",\n    \"In science, there are no shortcuts to truth.\",\n    \"Science is the great antidote to the poison of enthusiasm and superstition.\",\n    \"The future depends on what we do in the present.\",\n    \"The only limit to our realization of tomorrow will be our doubts of today.\",\n    \"Your time is limited, don't waste it living someone else's life.\",\n    \"Success is not final, failure is not fatal: It is the courage to continue that counts.\",\n    \"To invent, you need a good imagination and a pile of junk.\",\n    \"The only way to do great work is to love what you do.\",\n    \"If you want to find the secrets of the universe, think in terms of energy, frequency, and vibration.\",\n    \"The only thing necessary for the triumph of evil is for good men to do nothing.\",\n    \"Life is like riding a bicycle. To keep your balance, you must keep moving.\",\n    \"I would rather die of passion than of boredom.\",\n    \"The best way to predict the future is to create it.\",\n    \"The measure of intelligence is the ability to change.\",\n    \"The only thing that interferes with my learning is my education.\",\n    \"Two things are infinite: the universe and human stupidity; and I'm not sure about the universe.\",\n    \"The most beautiful experience we can have is the mysterious.\",\n    \"The important thing is not to stop questioning.\",\n    \"You have to learn the rules of the game. And then you have to play better than anyone else.\",\n    \"The difference between stupidity and genius is that genius has its limits.\",\n    \"Logic will get you from A to B. Imagination will take you everywhere.\",\n    \"The only true wisdom is in knowing you know nothing.\",\n    \"We are all in the gutter, but some of us are looking at the stars.\",\n    \"I never made one of my discoveries through the process of rational thinking.\",\n    \"Everything should be made as simple as possible, but not simpler.\",\n    \"I know not with what weapons World War III will be fought, but World War IV will be fought with sticks and stones.\",\n    \"Our greatest glory is not in never falling, but in rising every time we fall.\",\n    \"It's not that I'm so smart, it's just that I stay with problems longer.\",\n    \"The only real valuable thing is intuition.\",\n    \"A man who dares to waste one hour of time has not discovered the value of life.\",\n    \"The only thing standing between you and your goal is the story you keep telling yourself as to why you can't achieve it.\",\n    \"I can't change the direction of the wind, but I can adjust my sails to always reach my destination.\",\n    \"I find that the harder I work, the more luck I seem to have.\",\n    \"Don't count the days, make the days count.\",\n    \"The only place where success comes before work is in the dictionary.\",\n    \"If you don't value your time, neither will others. Stop giving away your time and talents. Value what you know and start charging for it.\",\n    \"I have learned over the years that when one's mind is made up, this diminishes fear; knowing what must be done does away with fear.\",\n    \"Success is walking from failure to failure with no loss of enthusiasm.\",\n    \"Your work is going to fill a large part of your life, and the only way to be truly satisfied is to do what you believe is great work. And the only way to do great work is to love what you do.\",\n    \"I have been impressed with the urgency of doing. Knowing is not enough; we must apply. Being willing is not enough; we must do.\",\n    \"The successful warrior is the average man, with laser-like focus.\",\n    \"The best revenge is massive success.\",\n    \"A successful man is one who can lay a firm foundation with the bricks others have thrown at him.\",\n    \"Don't watch the clock; do what it does. Keep going.\",\n    \"The first step toward success is taken when you refuse to be a captive of the environment in which you first find yourself.\",\n    \"It does not matter how slowly you go as long as you do not stop.\",\n    \"The secret to getting ahead is getting started.\",\n    \"Don't be afraid to give up the good to go for the great.\",\n    \"You are never too old to set another goal or to dream a new dream.\",\n    \"The only thing that will stop you from fulfilling your dreams is you.\",\n    \"The road to success and the road to failure are almost exactly the same.\",\n    \"Success is not in what you have, but who you are.\",\n    \"The only thing standing between you and your goal is the story you keep telling yourself as to why you can't achieve it.\",\n    \"The only place where success comes before work is in the dictionary.\",\n    \"I can't change the direction of the wind, but I can adjust my sails to always reach my destination.\",\n    \"I find that the harder I work, the more luck I seem to have.\",\n    \"Don't count the days, make the days count.\",\n    \"The only real valuable thing is intuition.\",\n    \"A man who dares to waste one hour of time has not discovered the value of life.\",\n    \"The only thing that will stop you from fulfilling your dreams is you.\",\n    \"The road to success and the road to failure are almost exactly the same.\",\n    \"Success is not in what you have, but who you are.\"\n];\n","<svelte:head>\n\t<link href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500&display=swap\" rel=\"stylesheet\">\n</svelte:head>\n\n<script type=\"module\" lang=\"ts\">\n\timport DisplayWords from \"./component/DisplayWords.svelte\";\n\timport Action from \"./component/Action.svelte\";\n\timport Result from \"./component/Result.svelte\";\n\timport { onMount } from 'svelte';\n\timport { quotes } from \"./quotes\";\n\n\tlet wordLists: any[] = [];\n\n\tlet containerPosition = {\n\t\toffsetTop: 0,\n\t\tcurrentPositionTop: 0\n\t}\n\t\n\tlet currentWord = {\n\t\tindex: 0,\n\t\toffsetTop: 0\n\t}\n\n\tlet keystrokes = {\n\t\ttotal: 0,\n\t\tincorrect: 0\n\t}\n\n\tlet result: boolean = false;\n\tonMount(async () => {\n\t\tawait getWordLists();\n\t})\n\tconst getWordLists = async () => {\n\t\twordLists = [];\n\t\tconst getSartingPoint = Math.floor(Math.random() * 104);\n\t\tconst sentences = quotes.slice(getSartingPoint, getSartingPoint + 50)\n\t\twordLists = adjustArrayText(sentences);\n\t};\n\n\tconst adjustArrayText = (sentences: any) => {\n\t\tconsole.log({ sentences })\n\t\tconst displayWords = [];\n\t\tfor (let i = 0; i < sentences.length; i++) {\n\t\t\tconst words = sentences[i].split(' ');\n\t\t\tfor (let j = 0; j < words.length; j++) {\n\t\t\t\tif (displayWords.length === 250) {\n\t\t\t\t\treturn displayWords;\n\t\t\t\t};\n\t\t\t\tdisplayWords.push({\n\t\t\t\t\ttext: words[j]\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\treturn displayWords;\n\t}\n\n</script>\n\n<main>\n\t{#if !result}\n\t\t<DisplayWords bind:currentWord={currentWord} bind:wordLists={wordLists} bind:containerPosition={containerPosition} />\n\t{/if}\n\t<Action \n\t\ton:showResult={(value) => {\n\t\t\tresult = value.detail;\n\t\t}} \n\t\tbind:currentWord={currentWord} \n\t\tbind:wordLists={wordLists} \n\t\tbind:keystrokes={keystrokes}\n\t\ton:getWordLists={getWordLists} \n\t\tbind:containerPosition={containerPosition}/>\n\t{#if result}\n\t\t<Result \n\t\t\tbind:currentWord={currentWord}\n\t\t\tbind:keystrokes={keystrokes} \n\t\t\tbind:wordLists={wordLists}\n\t\t/>\n\t{/if}\n</main>\n\n<style lang=\"scss\">\n\tmain {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\tmargin: 0 auto;\n\t\tfont-family: 'Montserrat', sans-serif;\n\t\t\n\t\t@media (min-width: 640px) {\n\t\t\tmax-width: none;\n\t\t}\n\t}\n\n\n</style>","import App from './App.svelte';\nconst app = new App({\n    target: document.body,\n});\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","null_to_empty","value","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_input_value","input","set_style","key","important","style","setProperty","current_component","set_current_component","component","get_current_component","Error","createEventDispatcher","type","detail","callbacks","$$","e","createEvent","initCustomEvent","custom_event","slice","call","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","add_flush_callback","flushing","seen_callbacks","Set","flush","i","length","update","pop","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","d","bind","index","props","undefined","bound","create_component","mount_component","on_mount","on_destroy","m","new_on_destroy","map","filter","destroy_component","detaching","make_dirty","then","fill","init","instance","create_fragment","not_equal","parent_component","prop_values","context","Map","skip_bound","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","[object Object]","this","$destroy","indexOf","splice","$$props","obj","$$set","keys","offsetTop","iterations","currentWord","wordLists","containerPosition","word","incorrect","minutes","seconds","start","__awaiter","thisArg","_arguments","P","generator","reject","fulfilled","step","next","rejected","result","done","apply","dispatch","inputUser","keystrokes","game","finish","timer","interval","finishGame","clearInterval","startGame","setInterval","procedNextWord","typedWord","splittedInput","split","updateLatestWordStatus","initFirstWord","moveDisplayWordPosition","initWord","activeElement","querySelectorAll","activeWord","lastWord","trim","number","toString","keyCode","total","checkCurrentActiveWord","wpm","correctWords","incorrectWords","accuracy","calculateWPM","getTypedWord","countCorrectWord","typedWords","item","countIncorrectWord","totalWords","calculateAccuracy","totalKeystroke","incorrectKey","Math","floor","quotes","currentPositionTop","getWordLists","getSartingPoint","random","sentences","adjustArrayText","console","log","displayWords","words","j","body"],"mappings":"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"}